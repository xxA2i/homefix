# Документация приложения HomeFix

## Обзор

HomeFix — это приложение для Android, предназначенное для связи пользователей с профессионалами в области ремонта и обслуживания дома (мастерами). Приложение позволяет просматривать, искать и нанимать мастеров на основе их специализации, рейтинга и цен. Также включает функции аутентификации пользователей, управления профилем и пополнения баланса.

## Возможности

- **Аутентификация пользователей**: Регистрация и вход для доступа к персонализированным функциям.
- **Поиск мастеров**: Поиск мастеров по имени или специализации с фильтрацией в реальном времени.
- **Просмотр по отраслям**: Просмотр мастеров по отраслям (например, сантехника, электрика).
- **Профили мастеров**: Просмотр подробных профилей мастеров с рейтингом, ценами и описанием.
- **Нанять мастера**: Нанять мастеров напрямую через приложение.
- **Добавление мастеров**: Добавление новых профилей мастеров в базу данных.
- **Управление балансом**: Пополнение баланса аккаунта для транзакций.
- **Отзывчивый интерфейс**: Плавные переходы и анимации для улучшения пользовательского опыта.

## Архитектура

Приложение построено по шаблону **Model-View-Controller (MVC)**:

- **Модель**: Управляется классом Master и DatabaseHelper для хранения данных.
- **Представление**: XML-лейауты для компонентов интерфейса (например, fragment_home.xml, item_master.xml).
- **Контроллер**: Фрагменты (HomeFragment, SearchFragment и др.) и MainActivity обрабатывают взаимодействия пользователя и бизнес-логику.

### Технологический стек

- **Язык**: Java (версия 1.8, как указано в build.gradle)
- **Фреймворк**: Android SDK
- **База данных**: SQLite (DatabaseHelper.java)
- **Интерфейс**: XML-лейауты, RecyclerView, CardView, BottomNavigationView, FloatingActionButton, ViewPager2
- **Анимации**: Анимации появления (R.anim.fade_in) и пользовательские анимации для диалогов (R.style.DialogAnimation)
- **Зависимости** (на основе build.gradle):
  - androidx.appcompat:appcompat:1.6.1
  - com.google.android.material:material:1.12.0 и 1.6.0
  - androidx.constraintlayout:constraintlayout:2.2.0
  - androidx.navigation:navigation-fragment:2.8.9
  - androidx.navigation:navigation-ui:2.8.9
  - androidx.viewpager2:viewpager2:1.0.0
  - Тестовые зависимости: junit:junit:4.13.2, androidx.test.ext:junit:1.2.1, androidx.test.espresso:espresso-core:3.6.1

### Конфигурация сборки

- **Пространство имен**: com.example.homefix
- **Минимальный SDK**: 33 (Android 13)
- **Целевой SDK**: 34 (Android 14)
- **Компиляция SDK**: 34
- **Версия приложения**: 1.0 (код версии: 1)
- **Оптимизация**: Minify отключен для release-сборки, используются ProGuard-файлы для оптимизации.

## Модули

### 1. Главная активность (MainActivity.java)

- Точка входа в приложение.
- Содержит BottomNavigationView для навигации между фрагментами Home, Search и Profile.
- Включает FloatingActionButton для перехода к AddMasterFragment.
- Управляет транзакциями фрагментов с анимациями появления/исчезновения.

### 2. Фрагменты

#### HomeFragment (HomeFragment.java)

- Отображает приветственный экран с фоновым изображением и кнопкой "Начать поиск".
- Открывает AlertDialog для выбора отрасли ремонта, переходя к IndustryFragment.

#### SearchFragment (SearchFragment.java)

- Предоставляет интерфейс поиска с EditText для фильтрации мастеров в реальном времени.
- Отображает RecyclerView со списком мастеров, ProgressBar во время загрузки и пустое состояние.
- Использует MasterAdapter для заполнения списка и DatabaseHelper для получения мастеров.

#### ProfileFragment (ProfileFragment.java)

- Управляет аутентификацией пользователей (вход/регистрация) и отображением профиля.
- Использует SharedPreferences для хранения статуса входа и баланса.
- Позволяет пополнять баланс через TopUpFragment и выполнять выход из системы.

#### IndustryFragment (IndustryFragment.java)

- Отображает мастеров, отфильтрованных по выбранной отрасли.
- Использует RecyclerView с MasterAdapter и показывает пустое состояние, если мастеров нет.
- Применяет анимацию появления к заголовку.

#### AddMasterFragment (AddMasterFragment.java)

- Форма для добавления новых мастеров в базу данных.
- Включает поля для имени, отрасли, рейтинга, цены и описания.
- Проверяет ввод и использует DatabaseHelper для сохранения мастера.

#### TopUpFragment (TopUpFragment.java)

- Позволяет пополнять баланс с предустановленными суммами (100, 500, 1000) или пользовательским вводом.
- Обновляет баланс в SharedPreferences и показывает подтверждение.

### 3. Управление данными

#### Master (Master.java)

- Модель данных для мастера с полями: id, name, specialty, rating, minPrice, description, reviewCount.
- Поддерживает конструкторы для создания и загрузки мастеров.

#### DatabaseHelper (DatabaseHelper.java)

- Помощник для работы с SQLite, управляющий двумя таблицами:
  - users: Хранит имя пользователя и пароль для аутентификации.
  - masters: Хранит данные мастеров.
- Методы:
  - addUser: Регистрирует нового пользователя, проверяет уникальность имени.
  - checkUser: Проверяет учетные данные для входа.
  - addMaster: Добавляет нового мастера в базу.
  - getAllMasters: Извлекает всех мастеров.
- Включает управление версиями базы данных и миграцию схемы (переименование speciality в specialty).

### 4. Компоненты интерфейса

#### MasterAdapter (MasterAdapter.java)

- Адаптер RecyclerView для отображения карточек мастеров (item_master.xml).
- Привязывает данные мастера к представлениям и обрабатывает клики для открытия MasterDetailDialog.
- Применяет анимации появления к элементам.

#### MasterDetailDialog (MasterDetailDialog.java)

- Пользовательский диалог для отображения подробной информации о мастере.
- Включает RatingBar, цены и описание.
- Предоставляет кнопки "Нанять" и "Отмена" с обработчиком для найма.

#### ViewPagerAdapter (ViewPagerAdapter.java)

- Адаптер для ViewPager2 для управления фрагментами Home, Search и Profile (используется для альтернативной навигации).

### 5. Лейауты

- **activity_main.xml**: CoordinatorLayout с фоновым изображением, контейнером фрагментов, BottomNavigationView и FAB.
- **fragment_home.xml**: Главный экран с фоновым изображением и кнопкой поиска.
- **fragment_search.xml**: Интерфейс поиска с EditText, RecyclerView, ProgressBar и пустым состоянием.
- **fragment_profile.xml**: Форма входа/регистрации или профиль с балансом и кнопками.
- **fragment_industry.xml**: Список мастеров по отрасли с заголовком и RecyclerView.
- **fragment_add_master.xml**: Форма для добавления мастеров с полями ввода и кнопками.
- **fragment_top_up.xml**: Форма пополнения баланса с кнопками предустановленных сумм.
- **item_master.xml**: CardView для одного мастера в RecyclerView.
- **dialog_master_detail.xml**: Лейаут диалога для подробной информации о мастере.
- **bottom_nav_menu.xml**: Меню для BottomNavigationView (Home, Search, Profile).
- **nav_graph.xml**: Навигационный граф для Navigation Component.

### 6. Ресурсы

- **colors.xml**: Определяет цвета, такие как primary_yellow, secondary_yellow, dark_yellow.
- **strings.xml**: Строки приложения, включая массив repair_industries для отраслей ремонта.
- **themes.xml**: Темы приложения, включая DialogAnimation и стиль RatingBar.
- **mipmap**: Иконки приложения (ic_launcher и другие).
- **drawable**: Изображения (wp, ic_add, ic_profile, ic_master_default, search_background, bottom_nav_colors).

## Навигация

- **BottomNavigationView**: Переключает между фрагментами Home, Search и Profile (на основе bottom_nav_menu.xml).
- **FloatingActionButton**: Переходит к AddMasterFragment.
- **Navigation Component**: Используется для навигации между фрагментами (на основе nav_graph.xml).
- **Транзакции фрагментов**: Используют анимации появления/исчезновения (R.anim.fade_in, R.anim.fade_out).
- **Стек возврата**: Поддерживает возврат к предыдущим фрагментам (например, из TopUpFragment или IndustryFragment).

## Поток данных

1. **Аутентификация пользователей**:
   - Пользователи регистрируются/входят через ProfileFragment.
   - Учетные данные сохраняются в SQLite (таблица users).
   - Статус входа и имя пользователя сохраняются в SharedPreferences.
2. **Просмотр мастеров**:
   - HomeFragment позволяет выбрать отрасль, переходя к IndustryFragment.
   - SearchFragment фильтрует мастеров по имени/специализации с помощью DatabaseHelper.
   - IndustryFragment фильтрует мастеров по отрасли.
3. **Подробности о мастере**:
   - Клик по мастеру в MasterAdapter открывает MasterDetailDialog.
   - Пользователи могут нанять мастеров, что вызывает уведомление.
4. **Добавление мастеров**:
   - AddMasterFragment собирает данные о мастере и сохраняет их через DatabaseHelper.
5. **Управление балансом**:
   - TopUpFragment обновляет баланс в SharedPreferences.
   - Баланс отображается в ProfileFragment.

## Обработка ошибок

- Проверка ввода в AddMasterFragment и ProfileFragment (например, пустые поля, некорректный рейтинг).
- Обработка ошибок базы данных в DatabaseHelper (например, дублирующиеся имена пользователей).
- Уведомления Toast для обратной связи (например, "Мастеров не найдено", "Неверные учетные данные").
- Проверка на null для контекста и аргументов во фрагментах.

## Анимации

- **Анимация появления**: Применяется к элементам интерфейса во фрагментах (R.anim.fade_in).
- **Анимация диалога**: Пользовательская анимация для MasterDetailDialog (R.style.DialogAnimation).
- **Переходы фрагментов**: Анимации появления/исчезновения для замены фрагментов.

## Ограничения

- Пароли хранятся в открытом виде в SQLite (риск безопасности).
- Отсутствует интеграция с сетью для данных в реальном времени или удаленного хранения.
- Ограниченное восстановление после ошибок (например, повреждение базы данных).
- Баланс хранится в SharedPreferences, не синхронизируется с базой данных.
- Нет сортировки или расширенной фильтрации мастеров (например, по рейтингу или цене).

## Возможные улучшения

- Реализовать хеширование паролей (например, BCrypt) для безопасного хранения.
- Добавить синхронизацию с облаком для данных пользователей и мастеров.
- Ввести опции сортировки в SearchFragment и IndustryFragment.
- Улучшить MasterDetailDialog добавлением отзывов и изображений портфолио.
- Добавить очистку ввода для предотвращения SQL-инъекций.
- Реализовать систему транзакций для найма мастеров с вычетом баланса.

## Инструкции по настройке

1. Клонируйте репозиторий в Android Studio.
2. Убедитесь, что Android SDK настроен (минимальный SDK 33, целевой SDK 34).
3. Добавьте следующие ресурсы:
   - Массив строк repair_industries в res/values/strings.xml.
   - Изображения: wp, ic_add, ic_profile, ic_master_default, search_background, bottom_nav_colors.
   - Анимация: fade_in.xml в res/anim.
   - Меню: bottom_nav_menu.xml в res/menu.
   - Навигация: nav_graph.xml в res/navigation.
   - Цвета: primary_yellow, secondary_yellow, dark_yellow в res/values/colors.xml.
   - Темы: themes.xml с определением стилей, таких как DialogAnimation и RatingBar.
4. Синхронизируйте проект с Gradle.
5. Запустите приложение на эмуляторе или устройстве (Android 13+).

## Заключение

HomeFix предоставляет удобную платформу для поиска и найма профессионалов по ремонту дома. Его модульная архитектура и интеграция с SQLite делают его масштабируемым, хотя улучшения в безопасности и функционале могут дополнительно повысить пользовательский опыт. Использование Navigation Component и ViewPager2 обеспечивает гибкость навигации, а Material Design компоненты улучшают визуальный стиль.